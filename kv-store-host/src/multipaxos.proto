syntax = "proto3";

package multipaxos;

enum ResponseType {
  OK = 0;
  REJECT = 1;
}

enum CommandType {
  GET = 0;
  PUT = 1;
  DEL = 2;
  FALSE = 3;
}

enum InstanceState {
  INPROGRESS = 0;
  COMMITTED = 1;
  EXECUTED = 2;
}

message RPC_Command {
  CommandType type = 1;
  string key = 2;
  string value = 3;
}

message RPC_Instance {
  int64 ballot = 1;
  int64 index = 2;
  int64 client_id = 3;
  InstanceState state = 4;
  RPC_Command command = 5;
}

message PrepareRequest {
  int64 ballot = 1;
  int64 sender = 2;
}

message PrepareResponse {
  ResponseType type = 1;
  int64 ballot = 2;
  repeated RPC_Instance instances = 3;
}

message AcceptRequest {
  RPC_Instance instance = 1;
  int64 sender = 2;
  int64 partition_index = 3;
}

message AcceptResponse {
  ResponseType type = 1;
  int64 ballot = 2;
}

message CommitRequest {
  int64 ballot = 1;
  int64 last_executed = 2;
  int64 global_last_executed = 3;
  int64 sender = 4;
}

message CommitResponse {
  ResponseType type = 1;
  int64 ballot = 2;
  int64 last_executed = 3;
}

service MultiPaxosRPC {
  rpc Prepare (PrepareRequest) returns (PrepareResponse) {}
  rpc Accept (AcceptRequest) returns (AcceptResponse) {}
  rpc Commit (CommitRequest) returns (CommitResponse) {}
}
